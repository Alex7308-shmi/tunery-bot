import os
import json
import logging
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

API_TOKEN = '7573595889:AAGgxZeKwqf2WDsNEF2u3oJsrli84qavn1U'
CHANNEL_USERNAME = "@tunery_mgmt"

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.environ["CREDENTIALS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–í–æ–ø—Ä–æ—Å—ã. –†–ê–ë–û–ß–ê–Ø").sheet1

# Telegram
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===

class Form(StatesGroup):
    category = State()
    question = State()
    anonymity = State()
    answer_format = State()

# === –ö–ù–û–ü–ö–ò ===

category_kb = InlineKeyboardMarkup(row_width=2)
category_kb.add(
    InlineKeyboardButton("–†–µ–ª–∏–∑—ã", callback_data="cat_–†–µ–ª–∏–∑—ã"),
    InlineKeyboardButton("–ü–ª–æ—â–∞–¥–∫–∏", callback_data="cat_–ü–ª–æ—â–∞–¥–∫–∏"),
    InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", callback_data="cat_–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ"),
    InlineKeyboardButton("–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –∏ —Å–º–µ–∂–Ω—ã–µ –ø—Ä–∞–≤–∞", callback_data="cat_–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –∏ —Å–º–µ–∂–Ω—ã–µ –ø—Ä–∞–≤–∞"),
    InlineKeyboardButton("–û–±–ª–æ–∂–∫–∏", callback_data="cat_–û–±–ª–æ–∂–∫–∏"),
    InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", callback_data="cat_–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"),
    InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_–î—Ä—É–≥–æ–µ"),
)

anon_kb = InlineKeyboardMarkup(row_width=2)
anon_kb.add(
    InlineKeyboardButton("–î–∞", callback_data="anon_–î–∞"),
    InlineKeyboardButton("–ù–µ—Ç", callback_data="anon_–ù–µ—Ç")
)

format_kb = InlineKeyboardMarkup(row_width=2)
format_kb.add(
    InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data="format_–¢–µ–∫—Å—Ç"),
    InlineKeyboardButton("–ì–æ–ª–æ—Å", callback_data="format_–ì–æ–ª–æ—Å")
)

# === –§–£–ù–ö–¶–ò–ò ===

def generate_upc(sheet):
    existing_upcs = sheet.col_values(6)
    numbers = [int(re.findall(r'\d+', upc)[0]) for upc in existing_upcs if re.match(r"UPC-Q-\d+", upc)]
    next_number = max(numbers) + 1 if numbers else 1
    return f"UPC-Q-{str(next_number).zfill(4)}"

def insert_date_separator(sheet):
    today = datetime.now().strftime('%d.%m.%Y')
    all_dates = sheet.col_values(1)
    if today not in all_dates:
        sheet.append_row([f"=== {today} ==="] + [''] * (sheet.col_count - 1))

# === –•–ï–ù–î–õ–ï–†–´ ===

@dp.message_handler(commands='start')
async def start(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Tunery.bot, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –≤ —ç—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
        "–ó–¥–µ—Å—å –º—ã —Ä–∞–∑–±–∏—Ä–∞–µ–º:\n"
        "‚Äì –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã —Ä–µ–ª–∏–∑—ã\n"
        "‚Äì —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º –¥—Ä–æ–ø–æ–º\n"
        "‚Äì –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –Ω–µ –≤—ã–ª–µ—Ç–µ—Ç—å\n"
        "‚Äì –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤—Å—ë –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n"
        "‚Ä¶\n\n"
        "–ê —Ç–∞–∫–∂–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—é—â–∏–π—Å—è –≤—ã–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @tunery_mgmt, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def check_sub(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)

    if member.status in ["member", "administrator", "creator"]:
        await Form.category.set()
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=category_kb)
    else:
        await bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @tunery_mgmt –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@dp.callback_query_handler(lambda c: c.data.startswith('cat_'), state=Form.category)
async def process_category(callback_query: CallbackQuery, state: FSMContext):
    category = callback_query.data.split('_', 1)[1]
    await state.update_data(category=category)
    await Form.next()
    await bot.send_message(callback_query.from_user.id, f"üìù –¢–µ–º–∞: *{category}*\n\n‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", parse_mode="Markdown")

@dp.message_handler(state=Form.question)
async def ask_anonymity(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await Form.next()
    await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –Ω–∏–∫ –≤ –æ—Ç–≤–µ—Ç–µ?", reply_markup=anon_kb)

@dp.callback_query_handler(lambda c: c.data.startswith('anon_'), state=Form.anonymity)
async def process_anon(callback_query: CallbackQuery, state: FSMContext):
    anon = callback_query.data.split('_')[1]
    await state.update_data(anonymity=anon)
    await Form.next()
    await bot.send_message(callback_query.from_user.id, "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Ö–æ—á–µ—à—å?", reply_markup=format_kb)

@dp.callback_query_handler(lambda c: c.data.startswith('format_'), state=Form.answer_format)
async def process_format(callback_query: CallbackQuery, state: FSMContext):
    fmt = callback_query.data.split('_')[1]
    await state.update_data(answer_format=fmt)

    data = await state.get_data()
    date = datetime.now().strftime('%d.%m.%Y')
    upc = generate_upc(sheet)
    insert_date_separator(sheet)

    sheet.append_row([
        date,
        data['question'],
        data['category'],
        data['anonymity'],
        data['answer_format'],
        upc,
        "–ù–æ–≤—ã–π",
        str(callback_query.from_user.id),
        ""
    ])

    restart_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÅ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="check_subscription")
    )

    await bot.send_message(
        callback_query.from_user.id,
        f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_USERNAME}",
        reply_markup=restart_kb
    )
    await state.finish()

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –í –ö–ê–ù–ê–õ–ï ===

@dp.channel_post_handler()
async def on_new_channel_post(message: types.Message):
    text = message.text or ""
    match = re.search(r"#UPC-Q-(\d{4})", text)
    
    if match:
        upc_code = f"UPC-Q-{match.group(1)}"
        rows = sheet.get_all_values()

        for i, row in enumerate(rows):
            if len(row) >= 6 and row[5] == upc_code:
                tg_id = row[7] if len(row) >= 8 else None
                if tg_id:
                    link = f"https://t.me/{message.chat.username}/{message.message_id}"
                    sheet.update_cell(i+1, 9, link)
                    try:
                        await bot.send_message(
                            int(tg_id),
                            f"–í–æ–ø—Ä–æ—Å –Ω–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ: {link}"
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# === –ó–ê–ü–£–°–ö ===

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
import asyncio
import socket

async def fake_web_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 10000))  # —Ñ–∞–ª—å—à–∏–≤—ã–π –ø–æ—Ä—Ç
    s.listen(1)
    while True:
        await asyncio.sleep(3600)

asyncio.get_event_loop().create_task(fake_web_server())

